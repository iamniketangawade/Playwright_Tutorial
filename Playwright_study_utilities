-------------------------------------------------------------------------------------------
//Playwright :Utilites 
-------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------
//Playwright :config.properties file 
-------------------------------------------------------------------------------------------
//Create config.properties in resources\
add userdata and xpath

url=https://practice.expandtesting.com/login
username=practice
password=SuperSecertPassword!
$username_xpath=//input[@id="username"]
$password_xpath=//input[@id="password"]
$login_button=//button[@id="submit-login"]



	//How to read properties files
		Properties prop=new Properties();
		String filename ="C:\\Users\\Niketan Gawade\\eclipse-workspace\\Playwright-Java\\src\\main\\resources\\cofig.properties";
		FileInputStream file =new FileInputStream(filename);
		prop.load(file);
		
		System.out.println(prop.get("url"));
-------------------------------------------------------------------------------------------	





	
		
-------------------------------------------------------------------------------------------
//Playwright : log4j
-------------------------------------------------------------------------------------------
-
		-Logger-getLogger()
		-log4j.properties file -append

//add dependencies ::
<!-- https://mvnrepository.com/artifact/log4j/log4j -->
<dependency>
    <groupId>log4j</groupId>
    <artifactId>log4j</artifactId>
    <version>1.2.17</version>
</dependency>		
		
//Create log4j.properties:
	 add  properties in file 
______________________________________________________________________________________________________	 
# ==============================
# Log4j Configuration File
# ==============================

# Define the root logger with appender file and console
log4j.rootLogger=DEBUG, CONSOLE, FILE

# ------------------------------
# Console Appender Configuration
# ------------------------------
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.Target=System.out
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
log4j.appender.CONSOLE.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%p] %c - %m%n

# ------------------------------
# File Appender Configuration
# ------------------------------
log4j.appender.FILE=org.apache.log4j.RollingFileAppender
log4j.appender.FILE.File=logs/automation.log
log4j.appender.FILE.MaxFileSize=5MB
log4j.appender.FILE.MaxBackupIndex=5
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
log4j.appender.FILE.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%p] %c - %m%n

# ------------------------------
# Set Logging Levels (Optional)
# ------------------------------
# Set custom levels for specific packages
log4j.logger.org.openqa.selenium=INFO
log4j.logger.com.microsoft.playwright=INFO
log4j.logger.org.apache.http=ERROR
______________________________________________________________________________________________________
	 
	 
	
		
-------------------------------------------------------------------------------------------
//Playwright : JDBC
-------------------------------------------------------------------------------------------		 
//add dependencies ::


<!-- https://mvnrepository.com/artifact/com.mysql/mysql-connector-j -->
<dependency>
    <groupId>com.mysql</groupId>
    <artifactId>mysql-connector-j</artifactId>
    <version>9.4.0</version>
</dependency>

//Code:::

//1.create connection
		Connection connection =DriverManager.getConnection("jdbc:mysql://localhost:3306","root","!QAZxsw2");
	
//2.Create a statement/Query
		Statement statement =connection.createStatement();
		
//write query you want execute
		String useDatabaseQuery="USE students";
		String selectDatabaseQuery="SELECT * FROM students";	
		
//3.Execute query
		statement.execute(useDatabaseQuery);
		
//4.Result set
		ResultSet set =statement.executeQuery(selectDatabaseQuery);
		
// Step 5: Get column info (metadata)
        ResultSetMetaData rsmd = set.getMetaData();
        int columnCount = rsmd.getColumnCount();

// Step 6: Print column headers
        for (int i = 1; i <= columnCount; i++) {
            System.out.print(rsmd.getColumnName(i) + "\t");
        }
        System.out.println("\n----------------------------------------");

// Step 7: Loop through results
        while (set.next()) {
            for (int i = 1; i <= columnCount; i++) {
                System.out.print(set.getString(i) + "\t");
            }
            System.out.println();
        }
		
//8.close connection
		connection.close();
		System.out.println("Query executed....");

