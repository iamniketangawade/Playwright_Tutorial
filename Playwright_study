Playwright
-------------------------------------------------------------------------------------------
// Head-less
		Playwright playwright =Playwright.create();  //Create Playwright interface
		Browser browser= playwright.chromium().launch();
		Page page =browser.newPage();
		
		page.navigate("https://testautomationpractice.blogspot.com/?");
		System.out.println(page.title());  //Return : Page title
				playwright.close();  //Close the session.		
		
-------------------------------------------------------------------------------------------		
// Default  :: Chromium browser 
		Playwright playwright =Playwright.create();  //Create Playwright interface
		Browser browser= playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));  //lauching default chromium browser
		Page page =browser.newPage();
		
		page.navigate("https://testautomationpractice.blogspot.com/?"); //Navigate URL
		playwright.close();  //Close the sessio		
		
		
-------------------------------------------------------------------------------------------		
//Maximize browser::
		Browser browser= playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false).setArgs(java.util.Arrays.asList("--start-maximized"))); //maximized screen
		BrowserContext browserContext= browser.newContext(new Browser.NewContextOptions().setViewportSize(null));
		Page page =browserContext.newPage();
		
🟢 --start-maximized opens the browser maximized.
🟢 setViewportSize(null) ensures the browser context matches your full screen size.

-------------------------------------------------------------------------------------------	
//Another simple way of Maximizing the window - Code	
		ArrayList<String> arguments =new ArrayList<String>();
		arguments.add("--start-maximized");
		Browser browser= playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false).setArgs(arguments));
		BrowserContext browserContext= browser.newContext(new Browser.NewContextOptions().setViewportSize(null)); //Minimize the screen window
		Page page =browserContext.newPage();

		page.navigate("https://testautomationpractice.blogspot.com/?"); //Navigate URL
	
-------------------------------------------------------------------------------------------
//minimize browser::
		Browser browser= playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));
		BrowserContext browserContext= browser.newContext(new Browser.NewContextOptions().setViewportSize(200,100)); //Minimize the screen window as per user resolution 
		Page page =browserContext.newPage();
		
-------------------------------------------------------------------------------------------		
//Chrome browser lauch using EXE :chrome.exe
		Browser browser =playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false).setExecutablePath(Paths.get("C:\\Users\\Niketan Gawade\\chrome\\win64-141.0.7390.54\\chrome-win64\\chrome.exe")));
		BrowserContext browsercontext =browser.newContext();
		Page page = browsercontext.newPage();
		page.navigate("https://testautomationpractice.blogspot.com/?");		
		
-------------------------------------------------------------------------------------------
//Firefox browser launch 
		Browser browser =playwright.firefox().launch(new BrowserType.LaunchOptions().setHeadless(false));
		BrowserContext browsercontext =browser.newContext();
		Page page = browsercontext.newPage();
		
		page.navigate("https://testautomationpractice.blogspot.com/?");
		
-------------------------------------------------------------------------------------------		
//Another simple way of launch the browsers ::msedge,chrome,	
		Browser browser =playwright.chromium().launch(new BrowserType.LaunchOptions().setChannel("msedge").setHeadless(false));
		Browser browser =playwright.chromium().launch(new BrowserType.LaunchOptions().setChannel("chrome").setHeadless(false));

-------------------------------------------------------------------------------------------
//Open specific user profile in browser
		
		String userInfo= "C:\\Users\\Niketan Gawade\\AppData\\Local\\Google\\Chrome\\User Data\\Default";
		BrowserContext browsercontext = playwright.chromium().launchPersistentContext(Paths.get(userInfo),new BrowserType.LaunchPersistentContextOptions().setChannel("chrome").setHeadless(false).setArgs(java.util.Arrays.asList("--start-maximized")));
		Page page =browsercontext.newPage();
		page.navigate("https://testautomationpractice.blogspot.com/?");
		
-------------------------------------------------------------------------------------------
//Incongito or private mode ::
		Browser browser =playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));
		
		BrowserContext browserContext =browser.newContext();
		Page page =browserContext.newPage();
		page.navigate("https://testautomationpractice.blogspot.com/?");
		
-------------------------------------------------------------------------------------------
//Navigate methods::

		✅ 1.Basic navigation option
		page.navigate("https://testautomationpractice.blogspot.com/?");

		//✅ 2. Navigation with Wait Options
		page.navigate("https://testautomationpractice.blogspot.com/?",
				new NavigateOptions().setTimeout(5000)
				.setWaitUntil(WaitUntilState.NETWORKIDLE));
		
		/*
		//Wait states:
		LOAD → Waits for the load event.
		DOMCONTENTLOADED → Waits for DOM to be ready.
		NETWORKIDLE → Waits until no network requests for 500ms. */
		
		//✅ 3. Forward, Backward, and Refresh Navigation
		page.goBack();  //Going backward page;
		Thread.sleep(2000);
		
		page.goForward(); //Going forward page
		Thread.sleep(2000);
		
		page.reload();  //Page refresh
		
-------------------------------------------------------------------------------------------
//Handling locators 

		page.locator("#name").type("Niketan");       //Using id locator 
		page.type("#name", "Niketan");                //Using id locator  ::type() method
		
		page.type("#name", "Niketan", new TypeOptions().setDelay(100)); //type slowly as per delay(means Playwright will type one character every 100 ms)
		page.type("[id=\"name\"]", "Niketan");  //css Selctor
		
		page.type("//input[@id=\"Wikipedia1_wikipedia-search-input\"]", "Selenium");
		page.click("[type=\"submit\"]");   //Click the button
		System.out.println(page.locator("//a[normalize-space()=\"Selenium\"]").innerText());  //Getting inner text

-------------------------------------------------------------------------------------------
//Test generator ::
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="codegen <path>"
//e.g -
mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="codegen https://testautomationpractice.blogspot.com/?"

-------------------------------------------------------------------------------------------		
//Handle DropDownlist ::

	//select by value ::
	page.selectOption("select", "az");
	
	//select by Text ::
	page.selectOption("select", new SelectOption().setLabel("Беларуская"));
	
	//Select by Index ::
	page.selectOption("select", new SelectOption().setIndex(3));
	
	//Select by Size of drop-down ::
		Locator  values = page.locator("select > option");
		System.out.println(values.count());
		
		//How to print all values
		for(int i=0;i<values.count();i++) {
			System.out.println(values.nth(i).innerText());;
		}
//another Simple way  ::

//Return list of webelement handle
		List<ElementHandle> dropdownlist =page.querySelectorAll("select > option");
		System.out.println(dropdownlist.size());
		
		for(ElementHandle i:dropdownlist) {
			System.out.println(i.innerText());
		}
-------------------------------------------------------------------------------------------				
//Handling Link
		Locator links=page.locator("a");   
		System.out.println("Link count  :: " +links.count());   //get count of link
		
//Handling link :: printing inner text and href(link)
		for(int i=0;i<links.count();i++) {
			System.out.println(links.nth(i).innerText() +" -> "+links.nth(i).getAttribute("href"));
		}
-------------------------------------------------------------------------------------------
//Check multiple checkboxes::

		Locator checkbox =page.locator("//div[@class='form-group']//input[@type='checkbox']");
		System.out.println("How many check box are in Days ::" +checkbox.count());
		
		for(int i=0;i<checkbox.count();i++) {
			checkbox.nth(i).click();   //Click all checkbox one by one (looping)
			System.out.println(checkbox.nth(i).innerText());

		}

//Check specific checkboxes ::
		
		Locator checkbox =page.locator("//div[@class='form-group']//input[@type='checkbox']");
		System.out.println(checkbox.count());
		
		for (int i=0;i<checkbox.count();i++) {
			Locator label =checkbox.nth(i).locator("xpath=following-sibling::label");
			
			String labletext =label.innerText();
					
			if(labletext.equalsIgnoreCase("Tuesday")) {
				checkbox.nth(i).check();
			}
		}

-------------------------------------------------------------------------------------------
//Locators 
 
//All locators ::
id ,name ,cssSelector, Xpath, Classname, tagname, LinkText, partialLinkText

//xpath ::

     //tagname[@attribute ='value']
  e.g :  //input[@id ='value'] 
  
  DOM ::console ::
  For Xpath :: $x("<Element>")
  $x("//input[@id='name']")
	 
   For Css selctor :: $$("<Element>")
   $$("input[id='name']")
-------------------------------------------------------------------------------------------
//Alerts/ Dialogs:: 

			page.onDialog(dialog ->{
			dialog.accept();  //accept dialog
			dialog.dismiss(); //dismiss dialog 
			System.out.println(dialog.message()); //Capturing message popup print on console.
		});
		
-------------------------------------------------------------------------------------------
//iframe/frame ::

		page.frameLocator("//frame[@src='frame_1.html']").locator("//input[@name=\"mytext1\"]").fill("Niketan");  //Switch to frame.
		page.mainFrame();  //Switch back to parent frame.
		
		Locator frames =page.locator("frame");
		System.out.println(frames.count());  //get count of all frame present on DOM.
		
		for(int i=0;i<frames.count();i++) {
			System.out.println(frames.nth(i).getAttribute("src"));   //Return all src text
		}
		
-------------------------------------------------------------------------------------------
Method	                           Description
-------------------------------------------------------------------------------------------

page.frames()	                 Returns list of all frames
page.frame(name)	             Access frame by name or id
page.frameByUrl(".*iframe.*")    Access frame by matching URL
frame.locator("selector")        Locate element inside frame
page.mainFrame()	             Switch back to the parent (main) frame
-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------



//popup/window handles ::


//Multiple window handles
		Page childwindow =page.waitForPopup(() -> {
			page.click("//a[normalize-space()=\"Selenium\"]");
		});
		
		childwindow.locator("//input[@title=\"Search Wikipedia [alt-f]\"]").fill("Niketan");
		System.out.println(childwindow.title());

//multiple  window handle
	List<Page> allpage =browsercontext.pages();
		System.out.println("all page count : " +allpage.size());
		for(Page i:allpage) {
			System.out.println("title : " +i.title());
		}

//Muliple window handle and locator element

Page childWindow =page.waitForPopup(() -> {
			page.locator("//input[@id=\"Wikipedia1_wikipedia-search-input\"]").fill("selenium");
			page.click("//input[@type=\"submit\"]");	
			page.click("//a[contains(.,'Selenium')]");
		});
		
		System.out.println(childWindow.title());
		
		List<Page> allpage =browsercontext.pages();
		System.out.println("all page count : " +allpage.size());
			//Page parent =allpage.get(0);
			//Page child =allpage.get(1);
			
			//System.out.println(page.locator("//h1[@id=\"firstHeading\"]//span[@class=\"mw-page-title-main\"][normalize-space()=\"Selenium\"]").innerText());
			
			Page parent =allpage.get(0);
			parent.bringToFront();
			System.out.println(parent.title());

			page.locator("//input[@id=\"Wikipedia1_wikipedia-search-input\"]").fill("happy");

-------------------------------------------------------------------------------------------
Method	                              Description
-------------------------------------------------------------------------------------------
page.waitForPopup()	                  Waits for a new tab/window to open
context.pages()                       Returns a list of all open pages (tabs)
page.bringToFront()	                  Brings a tab to focus
page.close()	                      Closes a tab
page.url()	                          Returns the page URL
page.title()	                      Returns the page title
-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------



//Mouse handle:: 

Playwright provides a mouse object (from page.mouse()) that allows low-level control of mouse operations.
You can perform:

-------------------------------------------------------------------------------------------
//Clicks (left, right, double)
-------------------------------------------------------------------------------------------
        page.mouse().click(200, 300);


-------------------------------------------------------------------------------------------
//Hovering ::
-------------------------------------------------------------------------------------------
	page.navigate("https://practice.expandtesting.com/hovers");
		
		String img1="img[alt=\"User Avatar\"][data-testid=\"img-user-1\"]";
		page.locator(img1).hover(); 
		
-------------------------------------------------------------------------------------------
//Drag and drop ::Movement
-------------------------------------------------------------------------------------------
page.navigate("https://jqueryui.com/resources/demos/droppable/default.html");
		
		//Drag and drop Element
		Locator draggable = page.locator("#draggable");
		Locator droppable = page.locator("#droppable");
 
		page.mouse().move(draggable.boundingBox().x + draggable.boundingBox().width / 2,
				          draggable.boundingBox().y + draggable.boundingBox().height / 2);
		page.mouse().down();
		page.mouse().move(droppable.boundingBox().x + droppable.boundingBox().width / 2,
			              droppable.boundingBox().y + droppable.boundingBox().height / 2);
		page.mouse().up();
		
		
//another simple way to drag and drop::

			Locator draggable = page.locator("#draggable");
			Locator droppable = page.locator("#droppable");
 
			draggable.dragTo(droppable);
			
//another simple way to drag and drop::

			page.locator("#drag").dragTo(page.locator("#drop"));

-------------------------------------------------------------------------------------------
Mouse down/up (press & release)
-------------------------------------------------------------------------------------------
mouse.down()	Press & hold the mouse button	
mouse.up()		Release the mouse button
-------------------------------------------------------------------------------------------
Scrolling (using wheel)
-------------------------------------------------------------------------------------------
		//Move mouse wheel downward direction::
		page.mouse().wheel(0,500);        //(x axis , y axis)
		//Move mouse wheel downward direction::
		page.mouse().wheel(20,0); 
		
-------------------------------------------------------------------------------------------
//slider  move :: same for resizeable element
-------------------------------------------------------------------------------------------
page.navigate("https://the-internet.herokuapp.com/horizontal_slider");
		
		//locating silder
		Locator slider =page.locator("//input[@value=\"0\"]");
		
		//Get slider positon
		BoundingBox sliderBox =slider.boundingBox();
		
		//calculate start postion(x and y)
		double x= sliderBox.x +sliderBox.width/2;
		double y= sliderBox.y+ sliderBox.height/2;
		
		//Move mouse to slider adn drag slightly 
		page.mouse().move(x, y);   
		page.mouse().down(); //Press and hold (mouse.down())
		
		page.mouse().move(x + 7, y);  //move 50 pixel
		page.mouse().up();     //release mouse button
		

//simple way to move slider ::
		Locator sliderPoint= page.locator("//input[@value=\"0\"]");
		sliderPoint.evaluate("el => el.value = 5");		
		
-------------------------------------------------------------------------------------------	
Common Mouse Methods
-------------------------------------------------------------------------------------------
Method	                                                      	  			  Description
-------------------------------------------------------------------------------------------
mouse.move(x, y)                                                	  		Move to coordinates
mouse.click(x, y)	                                             		   Left click
mouse.dblclick(x, y)	                                          		 	 Double click
mouse.down()	                                                  		   Press mouse button
mouse.up()	                                                      		   Release mouse button
mouse.wheel(dx, dy)	                                                  	 	Scrolls the page
mouse.click(x, y, new Mouse.ClickOptions().setButton(MouseButton.RIGHT))	 Right-click
locator.hover()	                                                             Hover over an element
locator.dragTo(target)	                                                     Drag and drop using locator
-------------------------------------------------------------------------------------------	



-------------------------------------------------------------------------------------------	
//handle KeyBorad event 
-------------------------------------------------------------------------------------------	

		page.navigate("https://testautomationpractice.blogspot.com/");
		
		page.locator("//input[@id=\"name\"]").type("Niketan");
		//page.keyboard().press("Control+A");
		//page.keyboard().press("Enter");
		//page.keyboard().press("Tab");
	   //page.keyboard().press("Space");
		
		 page.keyboard().down("Shift");
		 
		 for(int i=0;i<3;i++) {
			 page.keyboard().press("ArrowLeft");
			 
		 }

		page.locator("//input[@id=\"name\"]").type("Annu", new TypeOptions().setDelay(2000)); //handle even setting delay
			
			
-------------------------------------------------------------------------------------------
//File upload :single and multiple
-------------------------------------------------------------------------------------------
//single file upload 
		page.navigate("https://www.way2automation.com/way2auto_jquery/registration.php#load_box");
		page.locator("input[type=\"file\"]").setInputFiles(Paths.get("C:\\Users\\Niketan Gawade\\Documents\\AutomationTesting\\selenium\\test1.txt"));
		
//Multiple file upload ::
		page.navigate("https://davidwalsh.name/demo/multiple-file-upload.php");
		
		page.locator("//input[@id=\"filesToUpload\"]").setInputFiles(
				new Path[] {
				Paths.get("C:\\Users\\Niketan Gawade\\Documents\\AutomationTesting\\selenium\\test1.txt"),
				Paths.get("C:\\Users\\Niketan Gawade\\Documents\\AutomationTesting\\selenium\\test2.txt")			
				});


-------------------------------------------------------------------------------------------
//File download and save particular location:; 
-------------------------------------------------------------------------------------------
        page.navigate("https://demo.automationtesting.in/FileDownload.html");
		
		Download file =page.waitForDownload(() -> {
			
			page.locator("//a[@type=\"button\"]").click();
		});
		
		file.saveAs(Paths.get("C:\\Users\\Niketan Gawade\\Documents\\AutomationTesting\\selenium\\sample.pdf"));
		
		
-------------------------------------------------------------------------------------------
//Handle Basic Authencation 
-------------------------------------------------------------------------------------------
		Playwright playwright =Playwright.create();
		Browser browser =playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));
		
		//Handle basic Authencation:
		BrowserContext browserContext =browser.newContext(new Browser.NewContextOptions().setHttpCredentials("admin", "admin"));
		
		Page page =browserContext.newPage();
		page.navigate("http://the-internet.herokuapp.com/basic_auth");
		
		
-------------------------------------------------------------------------------------------		
//Screenshots ::
-------------------------------------------------------------------------------------------
//Capturing page screeshot::
		String screenshot= "C:\\Users\\Niketan Gawade\\Documents\\AutomationTesting\\selenium\\Screenshots\\test1.png";
		page.screenshot(new ScreenshotOptions().setPath(Paths.get(screenshot)));
		
		
//Capturing specific webelement screenshot ::
		page.locator("//button[normalize-space()=\"START\"]").screenshot(new Locator.ScreenshotOptions().setPath(Paths.get("C:\\Users\\Niketan Gawade\\Documents\\AutomationTesting\\selenium\\Screenshots\\test2.png")));
		



-------------------------------------------------------------------------------------------
//Capture test video ::
-------------------------------------------------------------------------------------------

	//caputring video of test ::
		String video="C:\\Users\\Niketan Gawade\\Documents\\AutomationTesting\\selenium\\Videos\\test1.mp4";
		BrowserContext browsercontext =browser.newContext(new Browser.NewContextOptions().setRecordVideoDir(Paths.get(video)));
		Page page =browsercontext.newPage();
		page.navigate("https://testautomationpractice.blogspot.com/");
		
		page.locator("//input[@id=\"name\"]").fill("Niketan video is started.");
		
		playwright.close();
-------------------------------------------------------------------------------------------		


-------------------------------------------------------------------------------------------
//TraceViewer ::	
-------------------------------------------------------------------------------------------

	BrowserContext browsercontext =browser.newContext();
		
		//TraceViewer  :: Tracing -start
		browsercontext.tracing().start(new Tracing.StartOptions()
				.setScreenshots(true)
				.setSnapshots(true)
				.setSources(false)
				);
		
		
		Page page =browsercontext.newPage();
		page.navigate("https://testautomationpractice.blogspot.com/");
		
		page.locator("//input[@id=\"name\"]").fill("Niketan");
		page.locator("//input[@id=\"email\"]").fill("Niketan@email.com");
		page.locator("//input[@id=\"phone\"]").fill("844672060");

		//Tracing -stop
		browsercontext.tracing().stop(new Tracing.StopOptions()
				.setPath(Paths.get("trace.zip"))
				);
			
		
	//close
		page.close();
		browsercontext.close();
		playwright.close();		
-------------------------------------------------------------------------------------------		




-------------------------------------------------------------------------------------------
//Playwright :Asseration 
-------------------------------------------------------------------------------------------

import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

public class Playwright_Assertions {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		Playwright playwright =Playwright.create();
		Browser browser =playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));
		
		Page page =browser.newPage();
		page.navigate("https://testautomationpractice.blogspot.com/");
		
		assertThat(page).hasURL("https://testautomationpractice.blogspot./");
		assertThat(page).hasTitle("Automation Testing Practice");
		
		page.close();
		browser.close();
		playwright.close();
			

-------------------------------------------------------------------------------------------
//Playwright :WebTable 
-------------------------------------------------------------------------------------------
//Row count ::
		Locator rows =page.locator("//table[@name=\"BookTable\"]//tr");
		int totalRows =rows.count();
		System.out.println("total column : "+ totalRows);
		
//Col count ::
		Locator column =page.locator("//table[@name=\"BookTable\"]//tr[1]/th");
		int totalColumn =column.count();
		System.out.println("total row : "+ totalColumn);
		
//print all table value on console
//Note ::Header contain th not td values so,everytime check table element in DOM  start index with 1.
		for(int i=1;i<totalRows;i++) {
			Locator colLocator=rows.nth(i).locator("td");
			
			for(int j=0;j<totalColumn;j++) {
				String celltext =colLocator.nth(j).innerText();
				
			System.out.print(celltext + "\t");
			}
			System.out.println();
			
		}
		
//get specific cell data/value ::
		String getSpecificCel=page.locator("//table[@name=\"BookTable\"]//tr[1]/th[1]").innerText();
		System.out.println("cell value :" +getSpecificCel);
		
		
-------------------------------------------------------------------------------------------	
		
